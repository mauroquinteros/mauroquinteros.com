---
import ThemeToggle from "./ThemeToggle.astro";

const navItems = [
  {
    title: "Inicio",
    label: "home",
    url: "#home",
  },
  {
    title: "Experiencia",
    label: "experience",
    url: "#experience",
  },
  {
    title: "Proyectos",
    label: "projects",
    url: "#projects",
  },
  {
    title: "Sobre m√≠",
    label: "about",
    url: "#about",
  },
];
---

<header
  class="fixed top-0 z-10 flex justify-center items-center gap-x-3 pt-5 w-full xl:w-[1120px]"
>
  <nav
    class="flex px-5 py-2 rounded-full gap-x-4
    text-sm font-medium text-slate-600 dark:text-slate-200
    bg-white/60 dark:bg-gray-800/60 backdrop-blur shadow-lg ring-1 ring-white/10"
  >
    {
      navItems.map((navItem) => (
        <a
          href={navItem.url}
          aria-label={navItem.label}
          class="transition-colors hover:text-[#2563eb] dark:hover:text-[#2dd4bf]"
        >
          {navItem.title}
        </a>
      ))
    }
    <ThemeToggle />
  </nav>
</header>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section");
    const navList = document.querySelectorAll("header nav a");

    const callbackObserver = (entries: IntersectionObserverEntry[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navList.forEach((navItem) => {
            if (navItem.getAttribute("aria-label") == entry.target.id) {
              navItem.classList.add("text-[#2563eb]");
              navItem.classList.add("dark:text-[#2dd4bf]");
            } else {
              navItem.classList.remove("text-[#2563eb]");
              navItem.classList.remove("dark:text-[#2dd4bf]");
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(callbackObserver, {
      root: null,
      rootMargin: "0px",
      threshold: 0.25,
    });

    sections.forEach((section) => {
      observer.observe(section);
    });

    document.onvisibilitychange = () => {
      document.visibilityState === "hidden"
        ? observer.disconnect()
        : sections.forEach((section) => {
            observer.observe(section);
          });
    };
  });
</script>
